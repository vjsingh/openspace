// Generated by CoffeeScript 1.3.3

/*
define((require) ->
  $           = require('jquery')
  _           = require('underscore')
  Backbone    = require('backbone')
  dummy       = require('handlebars')
  dummy       = require('plugins/backbone.layoutmanager')
  dummy       = require('templates')
  asdf
*/


(function() {

  define(['jquery', 'underscore', 'backbone', 'handlebars', 'templates', 'jqueryUniqueElementId', 'backboneValidation'], function($, _, Backbone, views) {
    var Mediator, app;
    Mediator = {};
    _.extend(Mediator, Backbone.Events);
    app = {
      root: "/",
      views: {},
      models: {},
      collections: {},
      Templates: window.Templating,
      getTemplate: function(templateName, context) {
        return app.Templates.tpl(templateName + '.us', context);
      },
      Mediator: Mediator,
      module: function(additionalProps) {
        return _.extend({
          Views: {},
          additionalProps: additionalProps
        });
      },
      AppView: {
        views: {},
        setMainView: function(view) {
          return this.setView(view, $('#main'));
        },
        setView: function(view, el) {
          var oldView, uniqueElId;
          uniqueElId = el.uid();
          oldView = this.views[uniqueElId];
          if (oldView) {
            oldView.destroy();
          }
          el.empty().html(view.el);
          view.render();
          this.views[uniqueElId] = view;
          return view;
        },
        setHeader: function(header) {
          if (this.header) {
            return this.header;
          }
          this.header = header;
          $('#header').html(header.el);
          header.render();
          return header;
        }
      }
    };
    _.extend(Backbone.Validation.callbacks, {
      valid: function(view, attr, selector) {
        var errorLabel;
        view.$('[' + selector + '~=' + attr + ']').removeClass('invalid').removeAttr('data-error');
        errorLabel = $('#' + attr + 'ErrorLabel');
        if (errorLabel) {
          return errorLabel.text('');
        }
      },
      invalid: function(view, attr, error, selector) {
        var errorLabel;
        view.$('[' + selector + '~=' + attr + ']').addClass('invalid').attr('data-error', error);
        errorLabel = $('#' + attr + 'ErrorLabel');
        if (errorLabel) {
          return errorLabel.text(error);
        }
      }
    });
    less.env = 'development';
    less.watch();
    return app;
  });

  /* If we ever want to go back to fetching templates asynchronously
  fetch: (path) ->
    path = path + ".html"
    unless JST[path]
      $.ajax({
        url: venmo.root + path
        async: false
      }).then (contents) ->
        JST[path] = _.template(contents)
    return JST[path]
  */


}).call(this);
