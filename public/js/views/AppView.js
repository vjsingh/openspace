// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['app'], function(app) {
    var AppView;
    AppView = (function(_super) {

      __extends(AppView, _super);

      function AppView() {
        this.context = __bind(this.context, this);

        this.renderTemplate = __bind(this.renderTemplate, this);

        this.render = __bind(this.render, this);

        this.destroy = __bind(this.destroy, this);

        this.unbindFromAll = __bind(this.unbindFromAll, this);

        this.addView = __bind(this.addView, this);

        this.doBind = __bind(this.doBind, this);
        return AppView.__super__.constructor.apply(this, arguments);
      }

      AppView.prototype.addedEventBindings = [];

      AppView.prototype.views = [];

      AppView.prototype.doBind = function(obj, event, cb) {
        obj.on(event, cb, this);
        return addedEventBindings.push([obj, event, cb]);
      };

      AppView.prototype.addView = function(view, selector) {
        $(selector).html(view.el);
        view.render();
        return this.views.push(view);
      };

      AppView.prototype.unbindFromAll = function() {
        var cb, event, eventArr, obj, _i, _len, _ref;
        _ref = this.addedEventBindings;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          eventArr = _ref[_i];
          obj = eventArr[0], event = eventArr[1], cb = eventArr[2];
          obj.off(event, cb);
        }
        return this.addedEventBindings = [];
      };

      AppView.prototype.destroy = function() {
        var view, _i, _len, _ref;
        this.remove();
        this.unbind();
        this.unbindFromAll();
        _ref = this.views;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          view = _ref[_i];
          view.destroy();
        }
        return this.views = [];
      };

      AppView.prototype.render = function() {
        this.renderTemplate();
        if (this.postRender) {
          return this.postRender();
        }
      };

      AppView.prototype.renderTemplate = function(context, templateName) {
        if (!context) {
          context = this.context();
        }
        if (!templateName) {
          templateName = this.templateName;
        }
        this.$el.html(app.getTemplate(this.templateName, context));
        return this;
      };

      AppView.prototype.context = function() {
        if (this.model) {
          return this.model.attributes;
        } else {
          return {};
        }
      };

      return AppView;

    })(Backbone.View);
    return AppView;
  });

}).call(this);
