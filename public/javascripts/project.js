// Generated by CoffeeScript 1.3.3
(function() {
  var EmailView, User, signup, user;

  User = Backbone.Model.extend({
    validation: {
      email: function(email) {
        var lcEmail, re;
        if (!email) {
          return 'Invalid Email!';
        }
        re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        lcEmail = email.toLowerCase();
        if (!re.test(email)) {
          return "Invalid Email!";
        }
        if ((lcEmail.indexOf('brown.edu') < 0) && (lcEmail.indexOf('risd.edu') < 0)) {
          return 'Must use a Brown or RISD email';
        }
      }
    },
    validateEmail: function(email) {
      var lcEmail, re;
      re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      lcEmail = email.toLowerCase();
      if (!re.test(email)) {
        return "Invalid Email!";
      }
      if ((lcEmail.indexOf('brown.edu') < 0) && (lcEmail.indexOf('risd.edu') < 0)) {
        return 'Must use a Brown or RISD email';
      }
      return true;
    }
  });

  user = new User();

  EmailView = Backbone.View.extend({
    initialize: function() {
      this.render();
      this.input = $("#emailForm > input");
      return Backbone.Validation.bind(this, {
        valid: function(view, attr, selector) {
          var errorLabel;
          view.$('[' + selector + '~=' + attr + ']').removeClass('invalid').removeAttr('data-error');
          errorLabel = $('#' + attr + 'ErrorLabel');
          if (errorLabel) {
            return errorLabel.text('');
          }
        },
        invalid: function(view, attr, error, selector) {
          var errorLabel;
          view.$('[' + selector + '~=' + attr + ']').addClass('invalid').attr('data-error', error);
          errorLabel = $('#' + attr + 'ErrorLabel');
          if (errorLabel) {
            return errorLabel.text(error);
          }
        }
      });
    },
    setSignupPage: function(step) {
      var template;
      template = _.template($('#signup' + step + 'T').html(), {});
      return $(this.el).html(template);
    },
    render: function() {
      return this.setSignupPage(1);
    },
    events: {
      "click input[name=submitEmail]": "submitEmail",
      "click input[name=submitName]": "submitName",
      "keyup input": "inputChanged"
    },
    submitSuccessful: function(event) {
      if (event.target.name === 'submitEmail') {
        this.setSignupPage(2);
      }
      if (event.target.name === 'submitName') {
        return this.setSignupPage(3);
      }
    },
    submitEmail: function(event) {
      event.preventDefault();
      if (this.model.isValid('email')) {
        return this.setSignupPage(2);
      }
    },
    submitName: function(event) {
      event.preventDefault();
      if (this.model.isValid('name') && this.model.isValid('password') && this.model.isValid('password2') && this.model.isValid('username')) {
        return this.setSignupPage(3);
      }
    },
    inputChanged: function(event) {
      var obj;
      obj = {};
      obj[event.target.name] = event.target.value;
      return this.model.set(obj);
    },
    emailChanged: function(event) {
      var email;
      email = this.input.val();
      return user.set({
        email: email
      });
      /*
          returned = user.set({email: email}, {
            error: (model, error) ->
              $('#errorDisplay').html(error)
          })
          if (returned)
            $('#errorDisplay').html("")
      */

    }
  });

  $('#uploadForm').hide();

  signup = new EmailView({
    el: $('#signup'),
    model: user
  });

  /*
  addBindings = (view, model) ->
    events = view.events
    el = $(view.el)
    events['click input[type=submit]'] = 'submitForm'
    inputs = []
    for child in el.find('form').children()
      if child.type != 'submit'
        inputs.push(child)
    for input in inputs
        events['keyup input[name=' + input.name + ']'] = 'inputChanged'
    console.log(view.numInputs)
    view.inputChanged = (event) ->
      value = event.target.value
      name = event.target.name
      obj = {}
      obj[name] = value
      returned = user.set(obj, {
        error: (model, error) ->
          event.target.isValid
          $('#' + name + 'ErrorDisplay').html(error)
      })
      if (returned)
        $('#' + name + 'ErrorDisplay').html('')
    view.submitForm = (event) ->
      #Button clicked, you can access the element that was clicked with event.currentTarget
      event.preventDefault()
      email = this.input.val()
      returned = user.set({email: email}, {
        error: (model, error) ->
          $('#errorDisplay').html(error)
      })
      if (returned)
        submitSuccessful(event)
  */


}).call(this);
